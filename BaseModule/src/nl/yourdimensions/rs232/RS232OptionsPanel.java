/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.yourdimensions.rs232;

import gnu.io.SerialPort;
import nl.yourdimensions.rs232.manager.RS232;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import nl.yourdimensions.rs232.api.RS232ConnectionAPI;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.windows.WindowManager;

final class RS232OptionsPanel extends javax.swing.JPanel {

    private final RS232OptionsPanelController controller;

    RS232OptionsPanel(final RS232OptionsPanelController controller) {
        this.controller = controller;

        initComponents();
        DocumentListener listener = new DocumentListener() {

                              @Override
                              public void changedUpdate(DocumentEvent e) {
                                  controller.changed();
                              }

                              @Override
                              public void removeUpdate(DocumentEvent e) {
                                  controller.changed();
                              }

                              @Override
                              public void insertUpdate(DocumentEvent e) {
                                  controller.changed();
                              }
                          };
       jTextField1.getDocument().addDocumentListener(listener);
       jReponseTimeout.getDocument().addDocumentListener(listener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        echoGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jParity = new javax.swing.JComboBox();
        jStopBits = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jDataBits = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jReponseTimeout = new javax.swing.JFormattedTextField();
        jPanel3 = new javax.swing.JPanel();
        jRadioEchoOff = new javax.swing.JRadioButton();
        jRadioEchoOn = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jBautRateBox = new javax.swing.JComboBox();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jPanel1.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jTextField1.text")); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(6, 6, 6)
                        .addComponent(jButton1))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jPanel2.border.title"))); // NOI18N

        jParity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Odd", "Even", "Mark", "Space" }));
        jParity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jParityItemStateChanged(evt);
            }
        });

        jStopBits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "1.5", "2" }));
        jStopBits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jStopBitsItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jLabel6.text")); // NOI18N

        jDataBits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "6", "7", "8" }));
        jDataBits.setSelectedItem("8");
        jDataBits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jDataBitsItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jLabel8.text")); // NOI18N

        jReponseTimeout.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("######0"))));
        jReponseTimeout.setText(org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jReponseTimeout.text")); // NOI18N
        jReponseTimeout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReponseTimeoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jReponseTimeout))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jStopBits, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jParity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDataBits, 0, 76, Short.MAX_VALUE))))
                    .addComponent(jLabel8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jDataBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jParity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jStopBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jReponseTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jPanel3.border.title"))); // NOI18N

        echoGroup.add(jRadioEchoOff);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioEchoOff, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jRadioEchoOff.text")); // NOI18N
        jRadioEchoOff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioEchoOffItemStateChanged(evt);
            }
        });

        echoGroup.add(jRadioEchoOn);
        jRadioEchoOn.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioEchoOn, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jRadioEchoOn.text")); // NOI18N
        jRadioEchoOn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioEchoOnItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RS232OptionsPanel.class, "RS232OptionsPanel.jLabel3.text")); // NOI18N

        jBautRateBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4800", "9600", "14400", "19200", "28800", "38400", "57600", "115200" }));
        jBautRateBox.setSelectedItem("9600");
        jBautRateBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jBautRateBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBautRateBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jRadioEchoOn)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioEchoOff))
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jBautRateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioEchoOn)
                    .addComponent(jRadioEchoOff))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextField1.setText(System.getProperty("user.home") +  System.getProperty("file.separator")  +"log.txt");
        controller.changed();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        fc.setDialogType(JFileChooser.CUSTOM_DIALOG);
        fc.setSelectedFile(new File(jTextField1.getText()));
        int returnVal = fc.showOpenDialog(WindowManager.getDefault().getMainWindow());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            jTextField1.setText(file.getPath());
        }
        controller.changed();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        controller.changed();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        controller.changed();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jReponseTimeoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReponseTimeoutActionPerformed
        System.out.println("Change");
        controller.changed();
    }//GEN-LAST:event_jReponseTimeoutActionPerformed

    private void jBautRateBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jBautRateBoxItemStateChanged
        controller.changed();
    }//GEN-LAST:event_jBautRateBoxItemStateChanged

    private void jDataBitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jDataBitsItemStateChanged
        controller.changed();
    }//GEN-LAST:event_jDataBitsItemStateChanged

    private void jParityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jParityItemStateChanged
        controller.changed();
    }//GEN-LAST:event_jParityItemStateChanged

    private void jStopBitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jStopBitsItemStateChanged
        controller.changed();
    }//GEN-LAST:event_jStopBitsItemStateChanged

    private void jRadioEchoOnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioEchoOnItemStateChanged
        controller.changed();
    }//GEN-LAST:event_jRadioEchoOnItemStateChanged

    private void jRadioEchoOffItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioEchoOffItemStateChanged
        controller.changed();
    }//GEN-LAST:event_jRadioEchoOffItemStateChanged

    void load() {
        jTextField1.setText("" + UISettings.getInstance().getLogPath());
        jCheckBox1.setSelected(UISettings.getInstance().isLogging());
        jBautRateBox.setSelectedItem(UISettings.getInstance().getBautDefault());

        if (UISettings.getInstance().isEchoOn()) {
            echoGroup.setSelected(jRadioEchoOn.getModel(), true);
        } else {
            echoGroup.setSelected(jRadioEchoOff.getModel(), true);
        }

        jDataBits.setSelectedItem("" + RS232ConnectionAPI.getInstance().getDataBits());

        updateUIParity();
        updateUIStopbits();

        jReponseTimeout.setText(RS232ConnectionAPI.getInstance().getTimeOut() + "");
    }

    private void updateUIStopbits() {
        switch (RS232ConnectionAPI.getInstance().getStopBits()) {
            case SerialPort.STOPBITS_1:
                jStopBits.setSelectedItem("1");
                break;
            case SerialPort.STOPBITS_1_5:
                jStopBits.setSelectedItem("1.5");
                break;
            case SerialPort.STOPBITS_2:
                jStopBits.setSelectedItem("2");
                break;
        }
    }

    private void updateUIParity() {
        switch (RS232ConnectionAPI.getInstance().getParity()) {
            case SerialPort.PARITY_EVEN:
                jParity.setSelectedItem("Even");
                break;
            case SerialPort.PARITY_MARK:
                jParity.setSelectedItem("Mark");
                break;
            case SerialPort.PARITY_NONE:
                jParity.setSelectedItem("None");
                break;
            case SerialPort.PARITY_ODD:
                jParity.setSelectedItem("Odd");
                break;
            case SerialPort.PARITY_SPACE:
                jParity.setSelectedItem("Space");
                break;
        }
    }

    void store() {

        if (RS232.getInstance().isConnected()) {
            NotifyDescriptor d = new NotifyDescriptor.Message("Changes will take effect the next time a RS232 session is started!", NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(d);
        }
        RS232.getInstance().setLogging(jCheckBox1.isSelected());
        UISettings.getInstance().setLogging(jCheckBox1.isSelected());
        UISettings.getInstance().setLogPath(jTextField1.getText());

        UISettings.getInstance().setBautDefault((String) jBautRateBox.getSelectedItem());
        UISettings.getInstance().setEchoOn(jRadioEchoOn.isSelected());


        RS232ConnectionAPI.getInstance().setTimeOut(Integer.parseInt(jReponseTimeout.getText()));

        processDataBits();
        processParity();
        processStopBits();
    }

    private void processStopBits() {
        int stopBits = SerialPort.STOPBITS_1;
        if (((String) jStopBits.getSelectedItem()).equalsIgnoreCase("1")) {
            stopBits = SerialPort.STOPBITS_1;
        } else if (((String) jStopBits.getSelectedItem()).equalsIgnoreCase("1.5")) {
            stopBits = SerialPort.STOPBITS_1_5;
        } else if (((String) jStopBits.getSelectedItem()).equalsIgnoreCase("2")) {
            stopBits = SerialPort.STOPBITS_2;
        }
        RS232ConnectionAPI.getInstance().setStopBits(stopBits);
    }

    private void processParity() {
        int parity = SerialPort.PARITY_NONE;
        if (((String) jParity.getSelectedItem()).equalsIgnoreCase("None")) {
            parity = SerialPort.PARITY_NONE;
        } else if (((String) jParity.getSelectedItem()).equalsIgnoreCase("Odd")) {
            parity = SerialPort.PARITY_EVEN;
        } else if (((String) jParity.getSelectedItem()).equalsIgnoreCase("Even")) {
            parity = SerialPort.PARITY_EVEN;
        } else if (((String) jParity.getSelectedItem()).equalsIgnoreCase("Mark")) {
            parity = SerialPort.PARITY_MARK;
        } else if (((String) jParity.getSelectedItem()).equalsIgnoreCase("Space")) {
            parity = SerialPort.PARITY_SPACE;
        }

        RS232ConnectionAPI.getInstance().setParity(parity);
    }

    private void processDataBits() throws NumberFormatException {
        int dataBits = 0;
        switch (Integer.parseInt((String) jDataBits.getSelectedItem())) {
            case 5:
                dataBits = SerialPort.DATABITS_5;
                break;
            case 6:
                dataBits = SerialPort.DATABITS_6;
                break;
            case 7:
                dataBits = SerialPort.DATABITS_7;
                break;
            case 8:
                dataBits = SerialPort.DATABITS_8;
                break;
        }
        RS232ConnectionAPI.getInstance().setDataBits(dataBits);
    }

    boolean valid() {
        if (jReponseTimeout.getText().equals("") ){
            return false;
        }
        if (Integer.parseInt(jReponseTimeout.getText()) <= 0) {
            return false;
        }
        if (jCheckBox1.isSelected() && jTextField1.getText().equals("")) {
            return false;
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup echoGroup;
    private javax.swing.JComboBox jBautRateBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jDataBits;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JComboBox jParity;
    private javax.swing.JRadioButton jRadioEchoOff;
    private javax.swing.JRadioButton jRadioEchoOn;
    private javax.swing.JFormattedTextField jReponseTimeout;
    private javax.swing.JComboBox jStopBits;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
