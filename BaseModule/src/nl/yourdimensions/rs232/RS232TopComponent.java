/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.yourdimensions.rs232;

import gnu.io.CommPortIdentifier;
import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.DefaultComboBoxModel;
import javax.swing.UIManager;
import javax.swing.text.Document;
import nl.yourdimensions.rs232.api.RS232ConnectionAPI;
import nl.yourdimensions.rs232.events.*;
import nl.yourdimensions.rs232.exceptions.*;
import org.netbeans.api.options.OptionsDisplayer;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//nl.yourdimensions.rs232//RS232//EN",
autostore = false)
@TopComponent.Description(preferredID = "RS232TopComponent",
iconBase = "nl/yourdimensions/rs232/icons/com-port.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "nl.yourdimensions.rs232.RS232TopComponent")
@ActionReference(path = "Menu/Window/NodeMcuWindows", position = 444)
@TopComponent.OpenActionRegistration(displayName = "#CTL_RS232Action",
preferredID = "RS232TopComponent")
public final class RS232TopComponent extends TopComponent implements IRS232EventObserver {

    private static final boolean isMacLaf = "Aqua".equals(UIManager.getLookAndFeel().getID());
    private static final Color macBackground = UIManager.getColor("NbExplorerView.background");
    
    public RS232TopComponent() {
        
        initComponents();
        setName(NbBundle.getMessage(RS232TopComponent.class, "CTL_RS232TopComponent"));
        setToolTipText(NbBundle.getMessage(RS232TopComponent.class, "HINT_RS232TopComponent"));

        jBautRateBox.setSelectedItem(UISettings.getInstance().getBautDefault());

        if(isMacLaf ) {
            jToolBar1.setBackground(macBackground);
            setBackground(macBackground);
            jScrollPane1.getViewport().setBackground(macBackground);
        }
    }

    private void initCommPortComboBox() {

        Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();
        ArrayList<String> ports = new ArrayList<String>();

        // iterate through, looking for the port
        while (portEnum.hasMoreElements()) {
            CommPortIdentifier currPortId = (CommPortIdentifier) portEnum.nextElement();
            ports.add(currPortId.getName());
        }
        jComPortBox.setModel(new DefaultComboBoxModel(ports.toArray()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRs232OutputMenu = new javax.swing.JPopupMenu();
        jRefreshComPortListMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jAutoScrollMenuItem = new javax.swing.JCheckBoxMenuItem();
        jWrapTextMenuItem = new javax.swing.JCheckBoxMenuItem();
        jLargerFontMenuItem = new javax.swing.JMenuItem();
        jSmallerFontMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jClearMenuItem = new javax.swing.JMenuItem();
        jLogSettingMenuItem = new javax.swing.JMenuItem();
        jComPortBox = new javax.swing.JComboBox();
        jBautRateBox = new javax.swing.JComboBox();
        jConnectionButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jViewCodeAsBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLogArea = new javax.swing.JTextArea();
        jSendField = new javax.swing.JTextField();
        jSendButton = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton3 = new javax.swing.JButton();
        jWrapToggle = new javax.swing.JToggleButton();
        jAutoScrollToggle = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSendInFormatBox = new javax.swing.JComboBox();

        jRs232OutputMenu.setComponentPopupMenu(jRs232OutputMenu);

        jRefreshComPortListMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jRefreshComPortListMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/yourdimensions/rs232/icons/refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jRefreshComPortListMenuItem, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jRefreshComPortListMenuItem.text")); // NOI18N
        jRefreshComPortListMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefreshComPortListMenuItemActionPerformed(evt);
            }
        });
        jRs232OutputMenu.add(jRefreshComPortListMenuItem);
        jRs232OutputMenu.add(jSeparator3);

        jAutoScrollMenuItem.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jAutoScrollMenuItem, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jAutoScrollMenuItem.text")); // NOI18N
        jAutoScrollMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAutoScrollMenuItemActionPerformed(evt);
            }
        });
        jRs232OutputMenu.add(jAutoScrollMenuItem);

        jWrapTextMenuItem.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jWrapTextMenuItem, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jWrapTextMenuItem.text")); // NOI18N
        jRs232OutputMenu.add(jWrapTextMenuItem);

        jLargerFontMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_MASK));
        org.openide.awt.Mnemonics.setLocalizedText(jLargerFontMenuItem, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jLargerFontMenuItem.text")); // NOI18N
        jLargerFontMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLargerFontMenuItemActionPerformed(evt);
            }
        });
        jRs232OutputMenu.add(jLargerFontMenuItem);

        jSmallerFontMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        org.openide.awt.Mnemonics.setLocalizedText(jSmallerFontMenuItem, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jSmallerFontMenuItem.text")); // NOI18N
        jSmallerFontMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSmallerFontMenuItemActionPerformed(evt);
            }
        });
        jRs232OutputMenu.add(jSmallerFontMenuItem);
        jRs232OutputMenu.add(jSeparator4);

        jClearMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jClearMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/yourdimensions/rs232/icons/clear.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jClearMenuItem, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jClearMenuItem.text")); // NOI18N
        jClearMenuItem.setToolTipText(org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jClearMenuItem.toolTipText")); // NOI18N
        jClearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAction(evt);
            }
        });
        jRs232OutputMenu.add(jClearMenuItem);

        jLogSettingMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/yourdimensions/rs232/icons/settings.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLogSettingMenuItem, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jLogSettingMenuItem.text")); // NOI18N
        jLogSettingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSettingsWindowActionPerformed(evt);
            }
        });
        jRs232OutputMenu.add(jLogSettingMenuItem);

        jBautRateBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4800", "9600", "14400", "19200", "28800", "38400", "57600", "115200" }));

        org.openide.awt.Mnemonics.setLocalizedText(jConnectionButton, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jConnectionButton.text")); // NOI18N
        jConnectionButton.setFocusable(false);
        jConnectionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jConnectionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConnectionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jLabel2.text")); // NOI18N

        jViewCodeAsBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ASCII", "Hex", "Oct", "Bin" }));
        jViewCodeAsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jViewCodeAsBoxActionPerformed(evt);
            }
        });

        jLogArea.setColumns(20);
        jLogArea.setEditable(false);
        jLogArea.setLineWrap(true);
        jLogArea.setRows(5);
        jLogArea.setText(org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jLogArea.text")); // NOI18N
        jLogArea.setComponentPopupMenu(jRs232OutputMenu);
        jScrollPane1.setViewportView(jLogArea);

        jSendField.setText(org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jSendField.text")); // NOI18N
        jSendField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jSendButton, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jSendButton.text")); // NOI18N
        jSendButton.setEnabled(false);
        jSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSendButtonActionPerformed(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(1);
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/yourdimensions/rs232/icons/refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jButton1.text")); // NOI18N
        jButton1.setToolTipText(org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jButton1.toolTipText")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);
        jToolBar1.add(jSeparator1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/yourdimensions/rs232/icons/clear.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jButton3.text")); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAction(evt);
            }
        });
        jToolBar1.add(jButton3);

        jWrapToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/yourdimensions/rs232/icons/wrap.png"))); // NOI18N
        jWrapToggle.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jWrapToggle, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jWrapToggle.text")); // NOI18N
        jWrapToggle.setToolTipText(org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jWrapToggle.toolTipText")); // NOI18N
        jWrapToggle.setFocusable(false);
        jWrapToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jWrapToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jWrapToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jWrapToggleActionPerformed(evt);
            }
        });
        jToolBar1.add(jWrapToggle);

        jAutoScrollToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/yourdimensions/rs232/icons/scroll-lock.png"))); // NOI18N
        jAutoScrollToggle.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jAutoScrollToggle, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jAutoScrollToggle.text")); // NOI18N
        jAutoScrollToggle.setToolTipText(org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jAutoScrollToggle.toolTipText")); // NOI18N
        jAutoScrollToggle.setFocusable(false);
        jAutoScrollToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jAutoScrollToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jAutoScrollToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAutoScrollToggleActionPerformed(evt);
            }
        });
        jToolBar1.add(jAutoScrollToggle);
        jToolBar1.add(jSeparator2);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nl/yourdimensions/rs232/icons/settings.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jButton2.text")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSettingsWindowActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RS232TopComponent.class, "RS232TopComponent.jLabel1.text")); // NOI18N
        jLabel1.setEnabled(false);

        jSendInFormatBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ASCII", "Hex" }));
        jSendInFormatBox.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSendInFormatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSendField, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSendButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComPortBox, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBautRateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jConnectionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jViewCodeAsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComPortBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jViewCodeAsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jBautRateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jConnectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSendField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSendButton)
                    .addComponent(jLabel1)
                    .addComponent(jSendInFormatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jViewCodeAsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jViewCodeAsBoxActionPerformed
        jLogArea.setText("");
    }//GEN-LAST:event_jViewCodeAsBoxActionPerformed

    private void jConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConnectionButtonActionPerformed
        if (RS232ConnectionAPI.getInstance().isSessionConnected()) {
            RS232ConnectionAPI.getInstance().stopSession();
        } else {
            try {
                String str = (String) (jBautRateBox.getSelectedItem());
                RS232ConnectionAPI.getInstance().setComPort((String) jComPortBox.getSelectedItem());
                RS232ConnectionAPI.getInstance().setDataRate(Integer.parseInt(str));
                RS232ConnectionAPI.getInstance().startSession();
            } catch (ComPortInUseException ex) {
                Exceptions.printStackTrace(ex);
            } catch (ComPortNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            } catch (ComPortException ex) {
                Exceptions.printStackTrace(ex);
            }

        }
    }//GEN-LAST:event_jConnectionButtonActionPerformed

    private void jSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSendButtonActionPerformed
        try {
            byte[] sendBytes = new byte[]{};
            String input = jSendField.getText();

            if (jSendInFormatBox.getSelectedItem().equals("ASCII")) {
                input = input + "\r\n";
                sendBytes = input.getBytes();
            } else if (jSendInFormatBox.getSelectedItem().equals("Hex")) {
                sendBytes = HexBinOctUtils.hexStringToByteArray(input);
            }

            RS232ConnectionAPI.getInstance().send(sendBytes);
            if (UISettings.getInstance().isEchoOn()) {
                jLogArea.append(input);
            }
        } catch (IOException ex) {
            jSendField.setText("Error sending data!");
            return;
        }
        jSendField.setText("");
    }//GEN-LAST:event_jSendButtonActionPerformed

    private void jAutoScrollToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAutoScrollToggleActionPerformed
        jAutoScrollMenuItem.setSelected(jAutoScrollToggle.isSelected());
    }//GEN-LAST:event_jAutoScrollToggleActionPerformed

    private void jWrapToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jWrapToggleActionPerformed
        jLogArea.setLineWrap(jWrapToggle.isSelected());
    }//GEN-LAST:event_jWrapToggleActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        initCommPortComboBox();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clearAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAction
        jLogArea.setText("");
    }//GEN-LAST:event_clearAction

    private void jAutoScrollMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAutoScrollMenuItemActionPerformed
        jAutoScrollToggle.setSelected(jAutoScrollMenuItem.isSelected());
    }//GEN-LAST:event_jAutoScrollMenuItemActionPerformed

    private void openSettingsWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSettingsWindowActionPerformed
        OptionsDisplayer.getDefault().open("Advanced/RS232");
    }//GEN-LAST:event_openSettingsWindowActionPerformed

    private void jRefreshComPortListMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefreshComPortListMenuItemActionPerformed
        initCommPortComboBox();
    }//GEN-LAST:event_jRefreshComPortListMenuItemActionPerformed

    private void jLargerFontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLargerFontMenuItemActionPerformed
        Font currentFont = jLogArea.getFont();
        Font newFont = new Font(currentFont.getName(), currentFont.getStyle(), (currentFont.getSize() + 2));
        jLogArea.setFont(newFont);
    }//GEN-LAST:event_jLargerFontMenuItemActionPerformed

    private void jSmallerFontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSmallerFontMenuItemActionPerformed
        Font currentFont = jLogArea.getFont();
        Font newFont = new Font(currentFont.getName(), currentFont.getStyle(), (currentFont.getSize() - 2));
        jLogArea.setFont(newFont);
    }//GEN-LAST:event_jSmallerFontMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jAutoScrollMenuItem;
    private javax.swing.JToggleButton jAutoScrollToggle;
    private javax.swing.JComboBox jBautRateBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JMenuItem jClearMenuItem;
    private javax.swing.JComboBox jComPortBox;
    private javax.swing.JButton jConnectionButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jLargerFontMenuItem;
    private javax.swing.JTextArea jLogArea;
    private javax.swing.JMenuItem jLogSettingMenuItem;
    private javax.swing.JMenuItem jRefreshComPortListMenuItem;
    private javax.swing.JPopupMenu jRs232OutputMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jSendButton;
    private javax.swing.JTextField jSendField;
    private javax.swing.JComboBox jSendInFormatBox;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JMenuItem jSmallerFontMenuItem;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox jViewCodeAsBox;
    private javax.swing.JCheckBoxMenuItem jWrapTextMenuItem;
    private javax.swing.JToggleButton jWrapToggle;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        if (!RS232ConnectionAPI.getInstance().isSessionConnected()) {
            initCommPortComboBox();
        }
        if (!RS232ConnectionAPI.getInstance().isObserver(this)) {
            RS232ConnectionAPI.getInstance().registerObserver(this);
        }
    }

    @Override
    public void componentClosed() {
        if (!RS232ConnectionAPI.getInstance().isSessionConnected()) {
            RS232ConnectionAPI.getInstance().unregisterObserver(this);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        p.setProperty("rs232logfontname", jLogArea.getFont().getName());
        p.setProperty("rs232logfontstyle", jLogArea.getFont().getStyle() + "");
        p.setProperty("rs232logfontsize", jLogArea.getFont().getSize() + "");


    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");

        String name = p.getProperty("rs232logfontname", "Monospaced");
        String style = p.getProperty("rs232logfontstyle", Font.PLAIN + "");
        String size = p.getProperty("rs232logfontsize", "13");
        jLogArea.setFont(new Font(name, Integer.parseInt(style), Integer.parseInt(size)));
    }

    @Override
    public void eventListener(IRS232Events ev) {
        if (ev instanceof ConnectedRS232Event) {
            jLogArea.setText("");
            jConnectionButton.setText("Stop");
            jComPortBox.setEnabled(false);
            jBautRateBox.setEnabled(false);
            jSendField.setEnabled(true);
            jSendButton.setEnabled(true);
            jLabel1.setEnabled(true);
            jSendInFormatBox.setEnabled(true);
        } else if (ev instanceof DisconnectedRS232Event) {
            jConnectionButton.setText("Open");
            jComPortBox.setEnabled(true);
            jBautRateBox.setEnabled(true);
            jSendField.setEnabled(false);
            jSendButton.setEnabled(false);
            jLabel1.setEnabled(false);
            jSendInFormatBox.setEnabled(false);
        } else if (ev instanceof DataReceivedRS232Event) {

            DataReceivedRS232Event evt = (DataReceivedRS232Event) ev;
            String data = new String(evt.getData());
            if (jViewCodeAsBox.getSelectedItem().equals("Hex")) {
                data = HexBinOctUtils.getHexString(evt.getData());
            } else if (jViewCodeAsBox.getSelectedItem().equals("Bin")) {
                data = HexBinOctUtils.getBinString(evt.getData());
            } else if (jViewCodeAsBox.getSelectedItem().equals("Oct")) {
                data = HexBinOctUtils.getOctString(evt.getData());
            }
            jLogArea.append(data);
            if (jAutoScrollToggle.isSelected()) {
                Document d = jLogArea.getDocument();
                jLogArea.select(d.getLength(), d.getLength());
            }

        }
    }

    
}
